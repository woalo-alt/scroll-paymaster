pragma solidity ^0.8.0;

interface ERC20 { function transfer(address recipient, uint256 amount) external returns (bool); function balanceOf(address account) external view returns (uint256); }

contract Paymaster {

address public scrollNetwork;
address public owner;
mapping(address => uint256) public balances;

event PaymentSent(address indexed recipient, uint256 amount);

constructor(address _scrollNetwork) {
    scrollNetwork = _scrollNetwork;
    owner = msg.sender;
}

modifier onlyOwner() {
    require(msg.sender == owner, "Only contract owner can call this function");
    _;
}

function deposit() external payable {
    balances[msg.sender] += msg.value;
}

function withdraw(uint256 amount) external {
    require(balances[msg.sender] >= amount, "Insufficient balance");
    balances[msg.sender] -= amount;
    payable(msg.sender).transfer(amount);
}

function transferScrollTokens(address recipient, uint256 amount) external onlyOwner {
    ERC20(scrollNetwork).transfer(recipient, amount);
    emit PaymentSent(recipient, amount);
}

function getBalance() external view returns(uint256) {
    return balances[msg.sender];
}
}
